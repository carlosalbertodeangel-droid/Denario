<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Denario Network - La Primera Criptomoneda Social</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
            overflow-x: hidden;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        
        .header h1 {
            font-size: 3.5em;
            margin-bottom: 20px;
            text-shadow: 0 0 20px rgba(255,255,255,0.5);
            animation: glow 2s ease-in-out infinite alternate;
        }
        
        @keyframes glow {
            from { text-shadow: 0 0 20px rgba(255,255,255,0.5); }
            to { text-shadow: 0 0 30px rgba(255,255,255,0.8), 0 0 40px rgba(102,126,234,0.3); }
        }
        
        .subtitle {
            font-size: 1.3em;
            opacity: 0.9;
            margin-bottom: 10px;
        }
        
        .tagline {
            font-size: 1em;
            opacity: 0.7;
            font-style: italic;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 40px 0;
        }
        
        .stat-card {
            background: rgba(255,255,255,0.1);
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-value {
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 10px;
            color: #43e97b;
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 30px;
            margin-top: 40px;
        }
        
        .panel {
            background: rgba(255,255,255,0.1);
            padding: 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            margin-bottom: 25px;
        }
        
        .panel h3 {
            font-size: 1.5em;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .welcome {
            text-align: center;
            padding: 60px 20px;
        }
        
        .welcome h2 {
            font-size: 2.5em;
            margin-bottom: 20px;
        }
        
        .welcome p {
            font-size: 1.2em;
            line-height: 1.6;
            opacity: 0.9;
            margin-bottom: 30px;
        }
        
        .features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
            margin: 40px 0;
        }
        
        .feature {
            text-align: center;
            padding: 30px;
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            transition: all 0.3s ease;
        }
        
        .feature:hover {
            transform: translateY(-10px);
            background: rgba(255,255,255,0.15);
        }
        
        .feature-icon {
            font-size: 3.5em;
            margin-bottom: 20px;
            display: block;
        }
        
        .feature h4 {
            font-size: 1.3em;
            margin-bottom: 15px;
            color: #43e97b;
        }
        
        .feature p {
            opacity: 0.9;
            line-height: 1.5;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-weight: 600;
        }
        
        .form-group input {
            width: 100%;
            padding: 15px;
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 10px;
            background: rgba(255,255,255,0.1);
            color: white;
            font-size: 16px;
            backdrop-filter: blur(10px);
        }
        
        .form-group input::placeholder {
            color: rgba(255,255,255,0.6);
        }
        
        .form-group input:focus {
            outline: none;
            border-color: #43e97b;
            background: rgba(255,255,255,0.15);
        }
        
        .btn {
            width: 100%;
            padding: 18px;
            background: linear-gradient(135deg, #43e97b, #38f9d7);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 30px rgba(67,233,123,0.4);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .user-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .user-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            background: rgba(255,255,255,0.1);
            border-radius: 12px;
            margin-bottom: 15px;
            border-left: 4px solid #43e97b;
        }
        
        .user-name {
            font-weight: bold;
            font-size: 1.1em;
        }
        
        .user-balance {
            font-weight: bold;
            color: #43e97b;
            font-size: 1.2em;
        }
        
        .activity-log {
            background: rgba(0,0,0,0.3);
            padding: 20px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            color: #00ff41;
            max-height: 300px;
            overflow-y: auto;
            font-size: 13px;
        }
        
        .status-online {
            display: inline-block;
            width: 12px;
            height: 12px;
            background: #43e97b;
            border-radius: 50%;
            margin-right: 8px;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(67,233,123,0.7); }
            70% { box-shadow: 0 0 0 10px rgba(67,233,123,0); }
            100% { box-shadow: 0 0 0 0 rgba(67,233,123,0); }
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(67,233,123,0.9);
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            font-weight: bold;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            z-index: 1000;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2.5em;
            }
            
            .stats {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .features {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚ö° DENARIO NETWORK</h1>
            <p class="subtitle">La Primera Criptomoneda Social del Mundo</p>
            <p class="tagline">Blockchain real ‚Ä¢ Miner√≠a colaborativa ‚Ä¢ Transacciones instant√°neas</p>
        </div>

        <div class="stats">
            <div class="stat-card">
                <div class="stat-value" id="userCount">6</div>
                <div class="stat-label">üë• Usuarios Activos</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="blockCount">47</div>
                <div class="stat-label">üì¶ Bloques Minados</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="totalDNR">12,847</div>
                <div class="stat-label">üí∞ DNR en Circulaci√≥n</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">
                    <span class="status-online"></span>Activa
                </div>
                <div class="stat-label">üåê Red Blockchain</div>
            </div>
        </div>

        <div id="welcomeSection" class="welcome">
            <h2>üöÄ ¬°Bienvenido a la Revoluci√≥n Blockchain!</h2>
            <p>√önete a la red de criptomoneda m√°s amigable del mundo. Crea transacciones reales, mina bloques colaborativamente y forma parte de una comunidad cripto √∫nica.</p>
            
            <div class="features">
                <div class="feature">
                    <span class="feature-icon">üéÅ</span>
                    <h4>50 DNR Gratis</h4>
                    <p>Recibe Denarios autom√°ticamente al unirte a la red</p>
                </div>
                <div class="feature">
                    <span class="feature-icon">‚ö°</span>
                    <h4>Transacciones Instant√°neas</h4>
                    <p>Env√≠a y recibe DNR en tiempo real sin comisiones</p>
                </div>
                <div class="feature">
                    <span class="feature-icon">‚õèÔ∏è</span>
                    <h4>Miner√≠a Colaborativa</h4>
                    <p>Mina bloques en equipo y gana recompensas de 10 DNR</p>
                </div>
                <div class="feature">
                    <span class="feature-icon">üåê</span>
                    <h4>Red Social Crypto</h4>
                    <p>Interact√∫a con otros usuarios en tiempo real</p>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="left-panel">
                <div class="panel">
                    <h3>üöÄ √önete a Denario Network</h3>
                    <div class="form-group">
                        <label>Nombre de Usuario:</label>
                        <input type="text" id="userName" placeholder="Tu nombre √∫nico en la red" maxlength="20">
                    </div>
                    <button class="btn" onclick="joinNetwork()">
                        üéØ Conectar Ahora
                    </button>
                    <div style="margin-top: 15px; text-align: center; opacity: 0.8;">
                        üéÅ Recibes 50 DNR gratis al unirte
                    </div>
                </div>

                <div class="panel" id="userPanel" style="display: none;">
                    <h3>üíº Mi Wallet Digital</h3>
                    <div style="text-align: center; background: rgba(67,233,123,0.2); padding: 25px; border-radius: 15px; margin: 20px 0;">
                        <div style="font-size: 2.5em; font-weight: bold;" id="userBalance">50.00 DNR</div>
                    </div>
                    <div style="background: rgba(0,0,0,0.2); padding: 15px; border-radius: 10px; font-family: monospace; word-break: break-all; margin: 15px 0;" id="userAddress">
                    </div>
                    <button class="btn" onclick="showTransactionForm()">üí∏ Enviar DNR</button>
                </div>

                <div class="panel" id="transactionPanel" style="display: none;">
                    <h3>üí∏ Enviar Denarios</h3>
                    <div class="form-group">
                        <label>Destinatario:</label>
                        <select id="recipientSelect" style="width: 100%; padding: 15px; border: 2px solid rgba(255,255,255,0.3); border-radius: 10px; background: rgba(255,255,255,0.1); color: white;">
                            <option value="">Seleccionar usuario...</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Cantidad DNR:</label>
                        <input type="number" id="sendAmount" placeholder="0.00" step="0.01" min="0.01">
                    </div>
                    <button class="btn" onclick="sendTransaction()">üöÄ Enviar Transacci√≥n</button>
                </div>
            </div>

            <div class="right-panel">
                <div class="panel">
                    <h3>üë• Usuarios en Red</h3>
                    <div class="user-list" id="userList">
                        <div class="user-item">
                            <div>
                                <div class="user-name">CryptoAlice ü§ñ</div>
                                <div style="font-size: 0.9em; opacity: 0.7;">Bot trader activo</div>
                            </div>
                            <div class="user-balance">1,247.50 DNR</div>
                        </div>
                        <div class="user-item">
                            <div>
                                <div class="user-name">BlockBob ü§ñ</div>
                                <div style="font-size: 0.9em; opacity: 0.7;">Minero profesional</div>
                            </div>
                            <div class="user-balance">892.25 DNR</div>
                        </div>
                        <div class="user-item">
                            <div>
                                <div class="user-name">MinerCarol ü§ñ</div>
                                <div style="font-size: 0.9em; opacity: 0.7;">Pool de miner√≠a</div>
                            </div>
                            <div class="user-balance">1,556.75 DNR</div>
                        </div>
                        <div class="user-item">
                            <div>
                                <div class="user-name">TraderDave ü§ñ</div>
                                <div style="font-size: 0.9em; opacity: 0.7;">Comerciante P2P</div>
                            </div>
                            <div class="user-balance">674.00 DNR</div>
                        </div>
                    </div>
                </div>

                <div class="panel">
                    <h3>üì° Actividad de Red</h3>
                    <div class="activity-log" id="activityLog">
                        [16:42:15] üåê Red Denario iniciada con 6 nodos<br>
                        [16:42:16] ‚ö° Blockchain sincronizado correctamente<br>
                        [16:42:17] üîó Protocolo P2P establecido<br>
                        [16:42:45] üí∏ CryptoAlice ‚Üí BlockBob: 25.50 DNR<br>
                        [16:43:12] ‚õèÔ∏è MinerCarol min√≥ bloque #47<br>
                        [16:43:13] üèÜ MinerCarol gan√≥ 10 DNR<br>
                        [16:43:58] üí∏ TraderDave ‚Üí CryptoAlice: 15.75 DNR<br>
                        [16:44:23] üîÑ Sincronizaci√≥n de red completada<br>
                        [16:44:44] ‚ö° Hash rate de red: 347 H/s<br>
                        [16:45:01] üìä 47 bloques confirmados en blockchain<br>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="notification" id="notification"></div>

    <script>
        let currentUser = null;
        let userBalance = 50.00;
        let users = [
            { name: "CryptoAlice", balance: 1247.50, address: "DNRa1b2c3d4e5f6789abcdef123456" },
            { name: "BlockBob", balance: 892.25, address: "DNRb2c3d4e5f6789abcdef1234567" },
            { name: "MinerCarol", balance: 1556.75, address: "DNRc3d4e5f6789abcdef12345678" },
            { name: "TraderDave", balance: 674.00, address: "DNRd4e5f6789abcdef123456789" }
        ];

        function showNotification(message, duration = 4000) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, duration);
        }

        function generateAddress(name) {
            const hash = btoa(name + Date.now()).replace(/[^a-zA-Z0-9]/g, '').substring(0, 30);
            return 'DNR' + hash;
        }

        function joinNetwork() {
            const userName = document.getElementById('userName').value.trim();
            
            if (!userName) {
                showNotification('‚ö†Ô∏è Por favor ingresa un nombre de usuario v√°lido');
                return;
            }
            
            if (userName.length > 20) {
                showNotification('‚ö†Ô∏è El nombre debe tener m√°ximo 20 caracteres');
                return;
            }

            currentUser = {
                name: userName,
                balance: 50.00,
                address: generateAddress(userName)
            };

            document.getElementById('welcomeSection').style.display = 'none';
            document.getElementById('userPanel').style.display = 'block';
            document.getElementById('userAddress').textContent = currentUser.address;
            
            updateRecipientSelect();
            addUserToList();
            
            showNotification(`üéâ ¬°Bienvenido ${userName}! Has recibido 50 DNR de regalo`, 6000);
            
            // Simular actividad
            setTimeout(() => {
                addActivityLog(`üéâ ${userName} se uni√≥ a la red DNR`);
                addActivityLog(`üéÅ Bonus de 50 DNR enviado a ${userName}`);
                updateStats();
            }, 1000);
        }

        function updateRecipientSelect() {
            const select = document.getElementById('recipientSelect');
            select.innerHTML = '<option value="">Seleccionar usuario...</option>';
            
            users.forEach(user => {
                const option = document.createElement('option');
                option.value = user.address;
                option.textContent = `${user.name} (${user.balance.toFixed(2)} DNR)`;
                select.appendChild(option);
            });
        }

        function addUserToList() {
            const userList = document.getElementById('userList');
            const userItem = document.createElement('div');
            userItem.className = 'user-item';
            userItem.style.background = 'rgba(67,233,123,0.2)';
            userItem.style.borderColor = '#43e97b';
            
            userItem.innerHTML = `
                <div>
                    <div class="user-name">${currentUser.name} üë§ (T√∫)</div>
                    <div style="font-size: 0.9em; opacity: 0.7;">Usuario real</div>
                </div>
                <div class="user-balance">${currentUser.balance.toFixed(2)} DNR</div>
            `;
            
            userList.insertBefore(userItem, userList.firstChild);
        }

        function showTransactionForm() {
            document.getElementById('transactionPanel').style.display = 'block';
        }

        function sendTransaction() {
            const recipientAddress = document.getElementById('recipientSelect').value;
            const amount = parseFloat(document.getElementById('sendAmount').value);
            
            if (!recipientAddress) {
                showNotification('‚ö†Ô∏è Por favor selecciona un destinatario');
                return;
            }
            
            if (!amount || amount <= 0) {
                showNotification('‚ö†Ô∏è Por favor ingresa una cantidad v√°lida');
                return;
            }
            
            if (amount > currentUser.balance) {
                showNotification('‚ö†Ô∏è Balance insuficiente');
                return;
            }

            const recipient = users.find(u => u.address === recipientAddress);
            
            currentUser.balance -= amount;
            recipient.balance += amount;
            
            document.getElementById('userBalance').textContent = `${currentUser.balance.toFixed(2)} DNR`;
            
            addActivityLog(`üí∏ ${currentUser.name} ‚Üí ${recipient.name}: ${amount.toFixed(2)} DNR`);
            
            showNotification(`‚úÖ ${amount.toFixed(2)} DNR enviados a ${recipient.name} exitosamente`);
            
            // Limpiar formulario
            document.getElementById('recipientSelect').value = '';
            document.getElementById('sendAmount').value = '';
            
            // Actualizar lista de usuarios
            updateUserList();
        }

        function updateUserList() {
            const userList = document.getElementById('userList');
            userList.innerHTML = '';
            
            // Agregar usuario actual
            if (currentUser) {
                addUserToList();
            }
            
            // Agregar usuarios bot
            users.forEach(user => {
                const userItem = document.createElement('div');
                userItem.className = 'user-item';
                
                userItem.innerHTML = `
                    <div>
                        <div class="user-name">${user.name} ü§ñ</div>
                        <div style="font-size: 0.9em; opacity: 0.7;">Bot trader activo</div>
                    </div>
                    <div class="user-balance">${user.balance.toFixed(2)} DNR</div>
                `;
                
                userList.appendChild(userItem);
            });
        }

        function addActivityLog(message) {
            const log = document.getElementById('activityLog');
            const time = new Date().toLocaleTimeString();
            log.innerHTML = `[${time}] ${message}<br>` + log.innerHTML;
            
            // Mantener solo las √∫ltimas 15 l√≠neas
            const lines = log.innerHTML.split('<br>');
            if (lines.length > 15) {
                log.innerHTML = lines.slice(0, 15).join('<br>');
            }
        }

        function updateStats() {
            document.getElementById('userCount').textContent = currentUser ? users.length + 1 : users.length;
            document.getElementById('blockCount').textContent = Math.floor(Math.random() * 10) + 47;
            
            const totalDNR = users.reduce((sum, user) => sum + user.balance, 0) + (currentUser ? currentUser.balance : 0);
            document.getElementById('totalDNR').textContent = Math.floor(totalDNR).toLocaleString();
        }

        // Simulaci√≥n de actividad de red
        function simulateNetworkActivity() {
            const activities = [
                'üîÑ Sincronizaci√≥n de red completada',
                '‚ö° Optimizando rendimiento de red',
                'üõ°Ô∏è Validaci√≥n de seguridad activa',
                'üìä Blockchain verificado correctamente',
                'üåê Nuevos peers conectados'
            ];
            
            setInterval(() => {
                if (Math.random() > 0.6) {
                    const activity = activities[Math.floor(Math.random() * activities.length)];
                    addActivityLog(activity);
                }
            }, 8000);
            
            // Transacciones autom√°ticas entre bots
            setInterval(() => {
                if (Math.random() > 0.7 && users.length >= 2) {
                    const sender = users[Math.floor(Math.random() * users.length)];
                    const recipient = users[Math.floor(Math.random() * users.length)];
                    
                    if (sender !== recipient && sender.balance > 10) {
                        const amount = parseFloat((Math.random() * 20 + 5).toFixed(2));
                        if (sender.balance >= amount) {
                            sender.balance -= amount;
                            recipient.balance += amount;
                            addActivityLog(`üí∏ ${sender.name} ‚Üí ${recipient.name}: ${amount} DNR`);
                            updateUserList();
                            updateRecipientSelect();
                        }
                    }
                }
            }, 12000);
        }

        // Inicializar
        updateRecipientSelect();
        simulateNetworkActivity();
        updateStats();
        
        // Actualizar stats cada 5 segundos
        setInterval(updateStats, 5000);
    </script>
</body>
</html>
